{"meta":{"title":"几棵小菜","subtitle":null,"description":"一份耕耘，一分收获","author":"久城KuJou","url":"https://cskujou.github.io"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"about/index.html","permalink":"https://cskujou.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"留言板","date":"2018-12-20T15:13:48.000Z","updated":"2021-08-12T06:45:57.495Z","comments":true,"path":"comment/index.html","permalink":"https://cskujou.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"https://cskujou.github.io/tags/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"https://cskujou.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"https://cskujou.github.io/rss/index.html","excerpt":"","text":""},{"title":"友人帐","date":"2018-12-19T15:11:06.000Z","updated":"2021-08-12T06:50:06.601Z","comments":true,"path":"links/index.html","permalink":"https://cskujou.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"番剧","date":"2019-02-10T13:32:48.000Z","updated":"2021-08-12T08:36:57.800Z","comments":false,"path":"bangumi/index.html","permalink":"https://cskujou.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"music/index.html","permalink":"https://cskujou.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://cskujou.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"https://cskujou.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"算法设计与分析第二章作业","slug":"alg-hw-ch2","date":"2022-03-16T07:15:10.000Z","updated":"2022-03-16T07:57:55.840Z","comments":true,"path":"2022/03/16/alg-hw-ch2/","link":"","permalink":"https://cskujou.github.io/2022/03/16/alg-hw-ch2/","excerpt":"","text":"习题 2-1 画出在3个数a, b, c中求中值问题的判定树。 解题思路我们可以先对a, b, c三个元素进行排序，一旦得到排序结果，即得到a, b, c三个元素的中值。 解答 习题 2-2 写一个与算法1.4不同的算法找出一个集合的最大元和最小元。它的方法是，每次拿相邻的元素对进行比较，然后拿其中的大者与当前最大的元素进行比较，拿其中的小者与当前最小的元素比较，最后找出最大元和最小元。分析这一算法的比较次数，并与算法1.4对照。哪个算法好些？ 算法1.4功能：找出集合$S$中的最大元和最小元 输入：$S$的元素$S[1],S[2],…,S[N]$ 输出：$S$中的最大元和最小元 procedure FINDMAXMIN var A, B, N: integer; S: array [1:N] of integer; procedure MAXMIN (S, i, j, A, B); var A1, B1,A2,B2: integer; S: array [i:j] of integer； begin if j-i=1 then if S[i]≥S[j] then begin1 A←S[i]； B←S[j] end1 else begin2 A←S[j]； B←S[i] end2 else begin3 MAXMIN (S, i, (i+j-1)/2, A1, B1); MAXMIN (S, (i+j+1)/2, j, A2, B2); if A1≥A2 then A←A1 else A←A2; if B1≤B2 then B←B1 else B←B2; end3 end begin read (N, S); MAXMIN (S, 1, N, A, B); write (A, B) end 解题思路算法1.4采用了分治法的设计思想。先将数组S分成两段，各自求两段的最大值（A1，A2）和最小值（B1，B2），然后再比较A1和A2，大着为整个数组的最大值；再比较B1和B2，小者为整个数组的最小值。本程序采用的递归的方式执行。于是我们仿照这种分治思想，设计自底向上的算法。 假设数组有$n=2^k$个元素。每次取数组的两个元素，比较得到这两个元素的较大者和较小者。整个数组比较了 $2^{k-1}$ 次，得到 $2^{k-1}$ 个最大值候选元素和 $2^{k-1}$ 个最小值候选元素。我们已知找出 $n$ 个元素中的最大（小）值需要 $n-1$ 次比较，故对于 $2^{k-1}$ 个最大（小）值候选元素需要 $2^{k-1}-1$ 次比较。所以总共需要 $3\\times2^{k-1} - 2 = \\frac 32n-2$ 次比较。 解答功能：找出集合$S$中的最大元和最小元 输入：$S$的元素$S[1],S[2],…,S[N]$ 输出：$S$中的最大元和最小元 def find_max_min(S): maximum = minimum = S[0] for i in range(int(len(S) / 2)): if S[2 * i] &gt; S[2 * i + 1]: maximal, minimal = S[2 * i], S[2 * i + 1] else: maximal, minimal = S[2 * i + 1], S[2 * i] maximum = max(maximum, maximal) minimum = min(minimum, minimal) if len(S) % 2 == 1: maximum = max(maximum, S[-1]) minimum = min(minimum, S[-1]) return maximum, minimum 习题 2.3 写出一个计算 $n^n$ 的算法，要求其时间复杂性为${\\rm O}(\\log_2n)$并证明你的程序是正确的。 解题思路直觉好的同学看到 $\\log$ 就要想到分治的思想。注意到 n^n = (n^2)^{\\frac n2} = (n \\times n)^{\\frac n2}通过不断将指数折半，最终使指数将为1，得到指数运算的结果。 解答功能：计算 $n^n$ 输入：$n$ 输出：$n^n$ def self_pow(n): return pow2(n, n) def pow2(a, b): if b == 0: return 1 elif b == 1: return a elif b % 2 == 0: return pow2(a * a, b // 2) else: return pow2(a * a, b // 2) * a","categories":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://cskujou.github.io/tags/数据结构与算法/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}]},{"title":"A Survey of Computer Graphs","slug":"cg-ch1","date":"2022-03-03T01:23:28.000Z","updated":"2022-03-15T02:56:32.766Z","comments":true,"path":"2022/03/03/cg-ch1/","link":"","permalink":"https://cskujou.github.io/2022/03/03/cg-ch1/","excerpt":"","text":"A Survey of Computer GraphicsIntroduction to Computer GraphicsWhat computers do process transform communicate information Aspects of Communication Origin (Where does it come from?) Throughput (how long will it take to get here? The amount of things it do or deal with in a particular period of time) Latency (how long do I have to wait before something happens?) Presentation (what does it look like?) Computer Graphics is the technology for presenting information Computer graphics is the sub-field of computer science which studies methods for digitally synthesizing and manipulating visual content. Modeling Rendering &amp; Displaying Animation Image / Video processing Hardware Human-Computer Interaction Visualization Applications and others graph LR description-.input.->CG-.output.->image 图像 VS 图形图像是指计算机内以位图（bitmap）形式存在的灰度信息 图形含有几何属性（强调场景的几何表示），是由场景的几何模型和景物的物理属性共同组成的 An ExampleModel: object description that a computer understands. Vertex: a point in 2 or 3 dimensional space. Bitmap: a rectangular array of bits mapped one-to-one with pixels. Given a set of vertices, draw lines between consecutive vertices. Define a set of points (vertices) in 2D space. The Graphics Pipeline Contents Graphics programming algorithms Graphics data structures Applied geometry and modeling Applied numerical computing Color and human vision Graphical interface design and programming Brief History of Computer Graphics The field of computer graphics began 70 years ago, with the display of a few lines on a cathode-ray tube (CRT). The Whirlwind Project and the SAGE computer system. Ivan Sutherland, his Sketchpad showed that computers could be used interactively to produce graphic output on a CRT display. When the CRT replaced the slow printing terminal, the production of pictures was theoretically made possible but was seldom done, due to the need for a large amount of memory and data transfer. Began from 1970s, realistic rendering techniques developed rapidly. The development of personal computers made hardware inexpensive and put computer graphics within the reach of everyone. Related Subjects","categories":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}],"tags":[{"name":"计算机图形学","slug":"计算机图形学","permalink":"https://cskujou.github.io/tags/计算机图形学/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}]},{"title":"Java编程入门及环境配置","slug":"java0","date":"2021-08-12T09:25:08.000Z","updated":"2022-03-14T15:54:49.577Z","comments":true,"path":"2021/08/12/java0/","link":"","permalink":"https://cskujou.github.io/2021/08/12/java0/","excerpt":"","text":"程序设计发展历程面向机器语言（低级语言） 机器语言 0101 0110 0110 0101 1010 1010 1001 1001 汇编语言 Assembly Language data segment num1 db 3 num2 db 5 num3 db ? data ends code segment assume cs:code,ds:data start:mov ax,data mov ds,ax mov al,num1 add al,num2 mov num3,al mov ax,4c00h int 21h code ends end start 面向过程语言 C语言 #include &lt;stdio.h&gt; int main(){ int a, b, s; a = 3; b = 5; s = a + b; printf(&quot;d&quot;, s); return 0; } 流程图 面向对象语言 Java public class Tester{ public static void main(String[] args){ int a = 3; int b = 5; int s = Adder.sum(a, b); System.out.println(a + &quot; + &quot; + b &quot; = &quot; s); } } class Adder{ static int sum(int x, int y){ return(x + y); } } C++ / C# Python 重点 1 面向对象语言的特性 封装性 将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方式。 继承 表示一个更特殊的类与一个更一般的类之间的关系。如果类A扩展类B，类A不但包含从类B继承的方法，还会有一些额外的功能。 多态 一个变量可以指示多种实际类型的现象称为多态 polymorphism。也就是说一个类型的变量既可以引用一个同类型的对象，也可以引用任何一个子类的对象。 JDKJDK 下载Oracle JDK: Downloads 术语名 缩写 解释 Java Development Kit JDK 编写Java程序的程序员使用的软件 Java Runtime Environment JRE 运行Java程序的用户实用得软件 JDK的选择操作系统：Windows / Mac / Linux 体系架构：x86 / x64 版本：Java SE / EE / ME LTS: Long Term Support Java 11 Java 8 Java APIOverview (Java SE 11 &amp; JDK 11 ) (oracle.com) JDK 配置 选择安装路径 尽量选在C盘根目录或一级目录 如：C:\\jdk11 或 C:\\java\\jdk11 设置环境变量 PATH 测试安装 使用命令提示符，输入javac -version DOS 环境在Windows中使用cmd运行DOS环境 C: 进入C盘根目录 cd 文件夹名字 进入文件夹 `cd.. 返回上一级目录 考点 2 编译单文件编译: javac Tester.java 联合编译: javac Tester.java 或 javac *.java 基于软件包的编译: javac com\\ynu\\it\\test\\Tester.java 考点 3 运行独立文件的运行: java Tester 基于软件包的运行: java com.ynu.it.test.Tester IDE IntellliJ IDEA Eclipse NetBeans IDEA程序结构 Project 1 Module 1 package 1 Class 1 Class 2 package 2 Module 2 Module 3 Project 2 Project 3 …… 常用快捷键 Ctrl + Enter 向下插入一条空行 Ctrl + Shift + Enter 向上插入一条空行 Shift + Alt + f 自动格式化代码 Tab 或 Enter 代码补全 Ctrl + Q（自定义）代码提示 Ctrl + / 注释掉一段代码（不执行） Ctrl + H 替换 常用缩写 缩写 代码 psvm public static void main(String[] args) sout System.out.println(); souf System.out.printf(): soutv System.out.println(&quot;value = &quot; + value ); fori for(int i = ; i &lt; ; i++){} psf public static final prsf private static final psfi public static final int psfs public static final String 重构 文件、模块重命名 快速替换变量名","categories":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://cskujou.github.io/tags/Java/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}]},{"title":"一种解决数据表嵌套的思路","slug":"data_base_nesting","date":"2021-08-12T09:15:48.000Z","updated":"2022-03-14T15:51:45.890Z","comments":true,"path":"2021/08/12/data_base_nesting/","link":"","permalink":"https://cskujou.github.io/2021/08/12/data_base_nesting/","excerpt":"","text":"问题设计**管理系统的时候，常遇到需要在一张表中嵌套一个或多个表的情况，如下面这个例子： 图书馆管理系统的数据库中有一张数据表users，存放所有的读者信息；还有一张数据表books，存放所有的图书信息。每位图书馆的读者可能借阅0或多本图书，那么有关如何设计两张数据表来建立它们的联系呢？ users表中已有的字段： id username password name age books表中已有的字段： id name author borrowed_date 解决思路1——通过图书定位借阅读者（多对一连接）思想考虑在books表里添加一个字段borrowed_by，该字段存放借阅读者的编号。也就是说，2号读者借阅了3号书籍，就将books表中id为3的记录的borrowed_by的值改成2。这样，我们可以通过查询books表，从而知道某本书籍的借阅情况。 那么假如我想知道id为5的读者借了哪些书呢？我们可以检索books表，列出所有borrowed_by值为5的记录，这些记录就是id为5的读者借阅的书籍。 实现usersbooks由books表可知，《钢铁是怎样炼成的》被id为2的用户test1借阅，《算法设计与分析》被id为3的用户test2借阅，《新概念英语2》被id为3的用户test2所借阅，中国近代史纲要暂未借出。 反过来，如果想要知道每个用户借阅了什么书，我们只需要对book表的borrowed_by字段进行检索。如，我们想知道id为1的用户admin借阅了什么书，我们只需要找到books表中borrowed_by字段值为1的记录，查询结构为空，故admin暂未借阅任何书籍。再如，我们想知道id为3的用户test2借阅了什么书，我们只需要找到books表中borrowed_by字段值为3的记录，得到图书id为2的《算法设计与分析》和id为3的《新概念英语2》。 解决思路2——通过读者定位图书（一对多连接）思想考虑在users表里添加一个字段borrowed_books，该字段存放图书的编号。也就是说，2号读者借阅了3号书籍，就将users表中id为2的记录的borrowed_books的值改成3。这样，我们可以通过查询users表，从而知道某个读者的借阅情况。当然一个人借阅的图书可能会有多本，所以图书编号之间需要用分隔符分开。如3号读者借阅了1号和2号图书，就将users表中id为3的记录的borrowed_books的值改成1,2,。 那么假如我想知道id为5的图书被那些读者所借阅呢？我们可以检索users表，列出borrowed_books值中包含5的记录（实现这个得去自学sql中的包含用法），则这条记录对应的用户借阅了该书。 实现usersbooks由users表可知，test1用户借阅了《钢铁是怎样炼成的》，test2用户借阅了《算法设计与分析》和《新概念英语2》，admin用户和test3用户暂未借阅任何书籍。 解决思路3——双向连接思想思路1和思路2都存在着一定的局限。思路1中，如果想知道某个用户到底借了什么书，就需要对books表进行遍历，找出borrowed_by字段与用户id相匹配的记录。而思路2中，如果想知道某本书到底被谁借了，就需要对users表进行遍历，找出borrowed_books字段中包含相应图书id的记录。要知道，查询操作其实是挺消耗资源的，尤其是当用户和图书数量都足够大时。下面介绍的方法将两种思路结合，将两张表建立双向的连接。虽然实现起来要占用更大的存储空间，但能够节省较多的时间。 实现usersbooks你会看到，这两张图完全是由前两个思路里偷过来的。users表是思路2中的原图，books表是思路1中的原图。这样一来，我们就很容易知道某用户借了什么书，也很容易就知道某本书被谁借阅。 总结三种方案都能解决数据表嵌套的问题。前两种适合用于：用到A表就要用B表的数据，用到B表不一定要用A表的数据。比如购物管理系统中用户表和订单表的关系：获取用户信息时需要顺带获取订单信息，但很多时候查询订单信息我们没必要去知道该订单属于谁。优点是数据库占磁盘资源较少，且代码实现较方便。第三种适合：用到A表就要用B表的数据，用到B表也要用A表的数据。比如图书管理系统中读者表和图书表的关系：获取用户信息时需要知道ta借了什么书，查询书的时候也要考虑此书为谁所借。 如果能够确定单向连接能够解决问题，那么编写程序时就会更加省事。但如果不能确定单向连接能够解决问题，则建议使用双向连接的方式，以减少后期改代码带来的痛苦。","categories":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://cskujou.github.io/tags/Java/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}]},{"title":"MD5加密，几乎不可能被逆向破解的加密方式","slug":"md5","date":"2021-08-12T09:15:48.000Z","updated":"2022-03-14T15:52:41.322Z","comments":true,"path":"2021/08/12/md5/","link":"","permalink":"https://cskujou.github.io/2021/08/12/md5/","excerpt":"","text":"MD5加密实训大作业要求我们不能以明文形式保存密码，存入数据库或文本文档或EXCEL中的密码必须经过MD5加密。 下面给出java中的md5加密的代码 public static String encrypt(String password) { try { MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;); md.update(password.getBytes()); return new BigInteger(1, md.digest()).toString(16); } catch (Exception e) { e.printStackTrace(); return null; } } 如何使用MD5加密呢？由于MD5加密几乎不可逆，我们不能去编写解密代码，但我们可以考虑先将用户输入的明文转换成密文，再让密文与数据库中的密文进行匹配。","categories":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://cskujou.github.io/tags/Java/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://cskujou.github.io/categories/技术/"}]},{"title":"这是一篇被加密的博客","slug":"encrypt","date":"2021-08-12T09:02:32.000Z","updated":"2022-03-14T15:52:53.733Z","comments":true,"path":"2021/08/12/encrypt/","link":"","permalink":"https://cskujou.github.io/2021/08/12/encrypt/","excerpt":"Here's something encrypted, password is required to continue reading.","text":"08c3b8be50dc4380e300f39b38e06245ea85200d3e55f42ae288a38e24781fd2dbe1c140e218a710a80e87b5e76e39cfceb756bc39279df1cb8c2ed296353a31d988d405e25bbaddcded4109da9a81d2d84c18544903ccb2d05e4ba526bc5b3770dbc51bcbab58828f2985d1e4c5a1d5259690ae5cfc36bea656cb94c9308e391bd6b18c7d3a2f4e9e03bdc102cbb0a774e16396ad01e42f500bc33b2cd08c8e0302a95648aefff2b1b4f8f3254f3e1ebbde287e0461621eb58a60b391c6227afc00285ec10d3f9a7d32fd05f6e1bd50cb877282f25919a8151d29001d7ae151846f94240a42ba46fdde0a5cd07461a99feede6b0c4c83e366e356a52c52a0e7e3b39f872a1716a03b5aae220673fb5790f807cb3a58b14e5d6713f149c7e91980f83a4e557b4e0e468fcf6a77dae937eeeeb0b983d6c1fba023c77e8e13985455edbf3382bc3e7408269e6043076f1b2c8d38d29b3b4ca29c3a9df110ca32419ca8c2308a84c6b83e9e934d2274ff93cc1d606fdf0b057c3d67dfcc80d0e9b6cebc7b9366fb3f214c3e78d62a9d4a426168aa47611d600f54e0f28afb141de3ab84b8f72acdaa97ef5c597d90f5f72041ed911bbc9ca3681a4c8b3a75992aea81892065f9d0d65f5fa46008aa143d37f14c95a0b4d114a883b7c9025b28bcd5fa7d0c58bedbad64a193db3d0413e17683db5ad85fba3ff4e939b8020b381398c3e7834e55950ca904aa8d05bbe53cec8cfc045aae93ef337a6701fec3490fd07de8bb99bc906d0e58cdcf215f5e02f2cd9dcad60ed59f1f47f1349e5aacc9e080c46262b988de0fcd6567e6df8c541d585b83d02ed45538b84e42e25bd611887dd38855e902243aa9eaed720c42d4e5 Hey, password is required here.","categories":[{"name":"随想","slug":"随想","permalink":"https://cskujou.github.io/categories/随想/"}],"tags":[],"keywords":[{"name":"随想","slug":"随想","permalink":"https://cskujou.github.io/categories/随想/"}]},{"title":"Hello World!","slug":"Hello","date":"2021-08-11T09:24:48.000Z","updated":"2022-03-14T15:52:06.053Z","comments":true,"path":"2021/08/11/Hello/","link":"","permalink":"https://cskujou.github.io/2021/08/11/Hello/","excerpt":"","text":"嘿嘿嘿你看我有自己的博客的诶！！！ 我这第一条博客该写啥捏emm 完全不知道该写啥呜呜呜呜（全然知らない ううう、、、） 那就 先来写一段Java？ public class Hello { public static void main(String[] args) { System.out.println(&quot;Welcome to my blog!!!&quot;) } } 嘿嘿嘿，这个代码块是不是很酷炫，悄悄告诉你吼，这个代码块还能全屏哦！！ 然后然后我们来瞅瞅数学公式渲染效果如何 r =a(1 - \\sin θ)这个公式可浪漫了呢，我就不多说了，想知道可以来看这个视频吼！考研数学宇哥给你讲心形线的浪漫故事_哔哩哔哩_bilibili 这个公式的图画出来好像长这样。诶嘿！胖胖的好可爱！ 问：你系统都做完了吗？ 答：我靠你这问题太伤我们友情了！拒绝作答！ 问：你这网站用啥做的啊？我也想搞一个！ 答：诶嘿，技术门槛并不高，你去搜搜 github pages + hexo 搭建个人博客的教程，凭你天才般的智力，很快就搞定啦！ 问：最近在忙啥？ 答：emmm，最近不忙，我才不说我就说不想写作业 问： $1+1=​?$ 答：你😋","categories":[{"name":"随想","slug":"随想","permalink":"https://cskujou.github.io/categories/随想/"}],"tags":[],"keywords":[{"name":"随想","slug":"随想","permalink":"https://cskujou.github.io/categories/随想/"}]}]}